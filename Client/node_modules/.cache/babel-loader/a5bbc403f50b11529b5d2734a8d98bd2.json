{"ast":null,"code":"var _jsxFileName = \"/Users/angelicamolero/Documents/Repositories/Client/Client/src/context/tasks/taskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport { TASKS_PROJECT, ADD_TASK, VALIDATE_TASK, DELETE_TASK, STATE_TASK, ACTUAL_TASK, UPDATE_TASK, CLEAN_TASK } from '../../types/index';\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const initialState = {\n    tasks: [{\n      id: 1,\n      name: 'Choose a Name',\n      state: true,\n      projectId: 1\n    }, {\n      id: 2,\n      name: 'Choose a Color',\n      state: false,\n      projectId: 2\n    }, {\n      id: 3,\n      name: 'Choose a Payment Method',\n      state: false,\n      projectId: 3\n    }, {\n      id: 4,\n      name: 'Choose a Host',\n      state: true,\n      projectId: 4\n    }, {\n      id: 5,\n      name: 'Choose a Name',\n      state: true,\n      projectId: 3\n    }, {\n      id: 6,\n      name: 'Choose a Color',\n      state: false,\n      projectId: 2\n    }, {\n      id: 7,\n      name: 'Choose a Payment Method',\n      state: false,\n      projectId: 4\n    }, {\n      id: 8,\n      name: 'Choose a Host',\n      state: true,\n      projectId: 1\n    }, {\n      id: 9,\n      name: 'Choose a Name',\n      state: true,\n      projectId: 4\n    }, {\n      id: 10,\n      name: 'Choose a Color',\n      state: false,\n      projectId: 3\n    }, {\n      id: 11,\n      name: 'Choose a Payment Method',\n      state: false,\n      projectId: 1\n    }, {\n      id: 12,\n      name: 'Choose a Host',\n      state: true,\n      projectId: 2\n    }],\n    tasksproject: null,\n    errortask: false,\n    taskselected: null\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState); // create fucntions\n  // obtain tasks from a project\n\n  const obtainTasks = projectId => {\n    dispatch({\n      type: TASKS_PROJECT,\n      payload: projectId\n    });\n  };\n\n  const uuid = require('uuid').v4;\n\n  const addTasks = task => {\n    task.id = uuid();\n    dispatch({\n      type: ADD_TASK,\n      payload: task\n    });\n  }; //validate and show an error\n\n\n  const validateTask = () => {\n    dispatch({\n      type: VALIDATE_TASK\n    });\n  }; //delete tasks by id\n\n\n  const deleteTask = id => {\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  }; //change state of each task\n\n\n  const changeStateTask = task => {\n    dispatch({\n      type: STATE_TASK,\n      payload: task\n    });\n  }; //EXTRACT a task for edit\n\n\n  const saveActualTask = task => {\n    dispatch({\n      type: ACTUAL_TASK,\n      payload: task\n    });\n  }; //EDIT OR MODIFY TASK\n\n\n  const updateTask = task => {\n    dispatch({\n      type: UPDATE_TASK,\n      payload: task\n    });\n  }; //CLEAN TASK SELECTED\n\n\n  const cleanTask = () => {\n    dispatch({\n      type: CLEAN_TASK\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      tasksproject: state.tasksproject,\n      errortask: state.errortask,\n      taskselected: state.taskselected,\n      obtainTasks,\n      addTasks,\n      validateTask,\n      deleteTask,\n      changeStateTask,\n      saveActualTask,\n      updateTask,\n      cleanTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"sources":["/Users/angelicamolero/Documents/Repositories/Client/Client/src/context/tasks/taskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","TASKS_PROJECT","ADD_TASK","VALIDATE_TASK","DELETE_TASK","STATE_TASK","ACTUAL_TASK","UPDATE_TASK","CLEAN_TASK","v4","uuid","TaskState","props","initialState","tasks","id","name","state","projectId","tasksproject","errortask","taskselected","dispatch","obtainTasks","type","payload","require","addTasks","task","validateTask","deleteTask","changeStateTask","saveActualTask","updateTask","cleanTask","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\nimport TaskContext from './taskContext'\nimport TaskReducer from './taskReducer'\nimport { TASKS_PROJECT, ADD_TASK, VALIDATE_TASK, DELETE_TASK,STATE_TASK, ACTUAL_TASK, UPDATE_TASK, CLEAN_TASK } from '../../types/index'\nimport {v4 as uuid} from 'uuid';\n\nconst TaskState = props => {\n    const initialState = {\n        tasks: [\n            { id: 1, name: 'Choose a Name', state: true, projectId: 1 },\n            { id: 2, name: 'Choose a Color', state: false, projectId: 2 },\n            { id: 3, name: 'Choose a Payment Method', state: false, projectId: 3 },\n            { id: 4, name: 'Choose a Host', state: true, projectId: 4 },\n            { id: 5, name: 'Choose a Name', state: true, projectId: 3 },\n            { id: 6, name: 'Choose a Color', state: false, projectId: 2 },\n            { id: 7, name: 'Choose a Payment Method', state: false, projectId: 4 },\n            { id: 8, name: 'Choose a Host', state: true, projectId: 1 },\n            { id: 9, name: 'Choose a Name', state: true, projectId: 4 },\n            { id: 10, name: 'Choose a Color', state: false, projectId: 3 },\n            { id: 11, name: 'Choose a Payment Method', state: false, projectId: 1 },\n            { id: 12, name: 'Choose a Host', state: true, projectId: 2 }\n        ],\n        tasksproject: null,\n        errortask: false,\n        taskselected: null\n    }\n\n    const [state, dispatch] = useReducer(TaskReducer, initialState);\n\n    // create fucntions\n\n    // obtain tasks from a project\n    const obtainTasks = projectId => {\n        dispatch({\n            type: TASKS_PROJECT,\n            payload: projectId\n        })\n    }\n    const uuid = require('uuid').v4\n    const addTasks = task => {\n        task.id = uuid();\n        dispatch ({\n            type: ADD_TASK,\n            payload: task\n        })\n    }\n\n    //validate and show an error\n    const validateTask = () => {\n        dispatch({\n            type: VALIDATE_TASK\n        })\n    }\n\n    //delete tasks by id\n    const deleteTask = id => {\n        dispatch({\n            type:  DELETE_TASK,\n            payload: id\n        })\n    }\n\n    //change state of each task\n    const changeStateTask = task => {\n        dispatch({\n            type: STATE_TASK,\n            payload: task\n        })\n    }\n\n    //EXTRACT a task for edit\n    const saveActualTask = task => {\n        dispatch({\n            type: ACTUAL_TASK,\n            payload: task\n        })\n    }\n\n    //EDIT OR MODIFY TASK\n    const updateTask = task => {\n        dispatch({\n            type: UPDATE_TASK,\n            payload: task\n        })\n    }\n\n    //CLEAN TASK SELECTED\n    const cleanTask = () => {\n        dispatch({\n            type: CLEAN_TASK\n        })\n    }\n\n    return(\n        <TaskContext.Provider\n            value={{\n                tasks: state.tasks,\n                tasksproject: state.tasksproject,\n                errortask: state.errortask,\n                taskselected: state.taskselected,\n                obtainTasks,\n                addTasks,\n                validateTask,\n                deleteTask,\n                changeStateTask,\n                saveActualTask,\n                updateTask,\n                cleanTask\n            }}\n        >\n            {props.children}\n        </TaskContext.Provider>\n    )\n}\nexport default TaskState;"]},"metadata":{},"sourceType":"module"}